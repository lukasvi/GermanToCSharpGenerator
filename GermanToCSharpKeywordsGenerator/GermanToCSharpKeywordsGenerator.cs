using System.Text;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.Text;

namespace GermanToCSharpKeywordsGenerator;

/// <summary>
/// A source generator that converts fake C# with german keywords in the source code to their corresponding C# keywords.
/// This generator processes files with a ".dcs" extension and rewrites the code to match C# syntax.
/// As Intelli-Sense does not support ".dcs" files, it also performs some checks on the file to ensure correct
/// class names, namespaces and class declarations to aid implementation.
/// </summary>
[Generator]
public class GermanToCSharpKeywordsGenerator : ISourceGenerator
{
    private static readonly string _prefix = 
        $"// This class is auto-generated by {nameof(GermanToCSharpKeywordsGenerator)}\r\n" +
        $"// {DateTime.Now:yyyy-MM-dd HH:mm:ss}\r\n" +
        $"// <auto-generated />\r\n\r\n";

    ///<inheritdoc/>
    public void Initialize(GeneratorInitializationContext context)
    {
        // Activate this if needed for debugging
#if DEBUG
        //if (!Debugger.IsAttached)
        //{
        //    Debugger.Launch();
        //}
#endif
    }

    ///<inheritdoc/>
    public void Execute(GeneratorExecutionContext context)
    {
        try
        {
            foreach (var file in context.AdditionalFiles)
            {
                if (!file.Path.EndsWith(".dcs"))
                {
                    continue;
                }

                var sourceCode = file.GetText()?.ToString();
                if (string.IsNullOrWhiteSpace(sourceCode))
                {
                    continue;
                }

                var newSource = GermanToEnglishRewriter.ConvertGermanToEnglish(sourceCode!);

                var tree = CSharpSyntaxTree.ParseText(newSource);
                var root = tree.GetRoot();

                DiagnosticsReporter.Report(context, root, file.Path);

                var filename = Path.GetFileNameWithoutExtension(file.Path);
                context.AddSource($"{filename}.g.cs", SourceText.From(_prefix + newSource, Encoding.UTF8));
            }
        }
        catch (Exception ex)
        {
            DiagnosticsReporter.ReportInternalError(context, ex);
        }
    }
}